"""Module to manage file-related tasks.

To Do:
    - Allow file retrieval without redirection
"""

import datetime as dt
import random
import string
import os

from flask import url_for, send_from_directory, safe_join
from werkzeug.utils import secure_filename
from tinydb import TinyDB, Query

UPLOAD_FOLDER = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), 'files'
)
ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'])

db = TinyDB('file_index.json')

# INITIAL SETUP
if not os.path.isdir('files'):
    os.makedirs('files')


def allowed_file(filename):
    """Check if uploaded file is of the allowed format/ extension
    """
    return '.' in filename and \
            filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def process_upload(file_obj):
    """Process the uploaded file by checking filename and
    creating an upload entry into file_index.json

    Args:
        file_obj (flask file object): flask.request.files['file'] object
    
    Returns:
        str: Unique upload ID
    """
    filename = secure_filename(file_obj.filename)
    upload_id = generate_id()
    processed_filename = unique_filename(filename, upload_id)
    file_obj.save(os.path.join(UPLOAD_FOLDER, processed_filename))
    filepath = safe_join('/files', processed_filename)

    db_add_file(
        upload_id,
        filename, 
        processed_filename, 
        filepath
    ) # Save path to DB

    return upload_id

def unique_filename(filename, upload_id):
    """Replace filename with upload_id, preserving file extension if any.

    Args:
        filename (str): Original filename
        upload_id (str): Unique upload ID
    
    Returns:
        str: An upload_id based filename
    """
    if "." in filename:
        return ".".join([upload_id, filename.rsplit(".", 1)[1]])
    else:
        return upload_id

def db_add_file(upload_id, filename, processed_filename, filepath):
    """Insert an entry into file_index.json with upload details.

    Args:
        upload_id (str): Unique upload ID
        filename (str): The original filename.
        processed_filename (str): New filename with upload ID as the rootname.
        filepath (str): The filepath relative to the domain.
    
    Returns:
        str: Unique upload ID
    """
    db.insert({
        'ori_name': filename,
        'path': filepath,
        'created_on': str(dt.datetime.utcnow()),
        'key': upload_id
    })
    return upload_id

def generate_id(size=6):
    """Generate a random ID, hopefully unique to be used as a unique identifier
    for each uploaded file.

    Args:
        size (int): Number of characters to generate
    
    Returns:
        str: The random ID
    """
    return ''.join(
        random.SystemRandom().choice(string.ascii_letters) for _ in range(size)
    )

def show_file(value, is_key=True):
    """Get filepath corresponding to the `value`.

    Args:
        value (str): This can be a unique id generated by the `generated_id` function,
                        or the filename.
        is_key (bool): True for unique id, False otherwise.

    Returns:
        If is_key is True:
            The physical filepath of the file corresponding to the value
        Else:
            The url path of the file (Usually /uploads/filename for now)
    """
    if is_key:
        entry = get_entry(value)
        return entry.get('path')
    else:
        return send_from_directory(UPLOAD_FOLDER, value)

def get_entry(key):
    """Find the TinyDB entry with the same `key` value as the `key` args here.

    Args:
        key (str): The unique id generated by the `generate_id` function

    Returns:
        TinyDBDocument: Returns first entry, empty dict otherwise.
    """
    q = Query()
    entry = db.search(q.key == key)
    return entry[0] if entry else {}
